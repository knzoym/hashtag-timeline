// src/components/layout/Sidebar.js
import React, { useState, useCallback } from 'react';
import logoImage from '../../assets/logo.png';

const Sidebar = ({ 
  isOpen, 
  onToggle, 
  onMenuItemClick,
  currentUser,
  isSaving,
  canSave,
  logoSrc,
  isWikiMode = false,
  currentPageMode = 'personal'
}) => {
  const [expandedSections, setExpandedSections] = useState(new Set(['„Éï„Ç°„Ç§„É´ÂÜÖÊìç‰Ωú']));
  const [expandedSubmenus, setExpandedSubmenus] = useState(new Set());
  const [isHovering, setIsHovering] = useState(false);;

  const toggleSection = (section) => {
    const newExpanded = new Set(expandedSections);
    if (newExpanded.has(section)) {
      newExpanded.delete(section);
    } else {
      newExpanded.add(section);
    }
    setExpandedSections(newExpanded);
  };

  const toggleSubmenu = (itemId) => {
    const newExpanded = new Set(expandedSubmenus);
    if (newExpanded.has(itemId)) {
      newExpanded.delete(itemId);
    } else {
      newExpanded.add(itemId);
    }
    setExpandedSubmenus(newExpanded);
  };

  // „É°„Éã„É•„Éº„Ç¢„Ç§„ÉÜ„É†ÔºàÊó¢Â≠ò„ÅÆÈÖçÂàó„ÇíÂãïÁöÑÁîüÊàêÁâà„Å´Â§âÊõ¥Ôºâ
  const menuItems = getMenuItems();
    {
      section: '„Éï„Ç°„Ç§„É´ÂÜÖÊìç‰Ωú',
      icon: '',
      items: [
        { 
          id: 'add-event', 
          label: '„Ç§„Éô„É≥„Éà„ÇíËøΩÂä†', 
          icon: '‚ûï',
          shortcut: '„ÉÄ„Éñ„É´„ÇØ„É™„ÉÉ„ÇØ',
          disabled: isWikiMode
        },
        { 
          id: 'reset-view', 
          label: 'Ë°®Á§∫„ÇíÂàùÊúü‰ΩçÁΩÆ„Å´', 
          icon: 'üéØ',
          shortcut: '„Éò„ÉÉ„ÉÄ„Éº„Éú„Çø„É≥'
        },
        { 
          id: 'sample-events', 
          label: '„Çµ„É≥„Éó„É´„Ç§„Éô„É≥„Éà', 
          icon: 'üìå',
          disabled: isWikiMode,
          subItems: [
            { id: 'sample-architecture', label: 'Âª∫ÁØâÂè≤„Ç§„Éô„É≥„Éà', icon: 'üèõÔ∏è' },
            { id: 'sample-history', label: 'Êó•Êú¨Âè≤„Ç§„Éô„É≥„Éà', icon: 'üóæ' },
            { id: 'sample-clear', label: '„Çµ„É≥„Éó„É´„Çí„ÇØ„É™„Ç¢', icon: 'üóëÔ∏è' }
          ]
        },
        { 
          id: 'clear-all', 
          label: '„Åô„Åπ„Å¶„ÅÆ„Éá„Éº„Çø„Çí„ÇØ„É™„Ç¢', 
          icon: 'üóëÔ∏è',
          danger: true,
          disabled: isWikiMode
        }
      ]
    },
    {
      section: '„Éï„Ç°„Ç§„É´Êìç‰Ωú',
      icon: '',
      items: [
        { 
          id: 'new', 
          label: 'Êñ∞Ë¶è‰ΩúÊàê', 
          icon: 'üìÑ', 
          shortcut: 'Ctrl+N',
          disabled: isWikiMode
        },
        { 
          id: 'open', 
          label: '„Éï„Ç°„Ç§„É´„ÇíÈñã„Åè', 
          icon: 'üìÇ', 
          shortcut: 'Ctrl+O',
          disabled: !currentUser || isWikiMode,
          tooltip: !currentUser ? '„É≠„Ç∞„Ç§„É≥„ÅåÂøÖË¶Å„Åß„Åô' : 
                   isWikiMode ? 'Wiki„É¢„Éº„Éâ„Åß„ÅØÂà©Áî®„Åß„Åç„Åæ„Åõ„Çì' : null
        },
        { 
          id: 'save', 
          label: '‰øùÂ≠ò', 
          icon: 'üíæ', 
          shortcut: 'Ctrl+S',
          disabled: !currentUser || !canSave || isSaving || isWikiMode,
          tooltip: !currentUser ? '„É≠„Ç∞„Ç§„É≥„ÅåÂøÖË¶Å„Åß„Åô' : 
                   isWikiMode ? 'Wiki„É¢„Éº„Éâ„Åß„ÅØÂà©Áî®„Åß„Åç„Åæ„Åõ„Çì' : null
        },
        { 
          id: 'save-as', 
          label: 'ÂêçÂâç„Çí‰ªò„Åë„Å¶‰øùÂ≠ò', 
          icon: 'üíæ', 
          disabled: !currentUser || !canSave || isWikiMode,
          tooltip: !currentUser ? '„É≠„Ç∞„Ç§„É≥„ÅåÂøÖË¶Å„Åß„Åô' : 
                   isWikiMode ? 'Wiki„É¢„Éº„Éâ„Åß„ÅØÂà©Áî®„Åß„Åç„Åæ„Åõ„Çì' : null
        },
        { 
          id: 'export', 
          label: '„Ç®„ÇØ„Çπ„Éù„Éº„Éà', 
          icon: 'üì§',
          disabled: isWikiMode,
          subItems: [
            { id: 'export-json', label: 'JSONÂΩ¢Âºè„ÅßÊõ∏„ÅçÂá∫„Åó', icon: '{ }' },
            { id: 'export-csv', label: 'CSVÂΩ¢Âºè„ÅßÊõ∏„ÅçÂá∫„Åó', icon: 'üìä' },
            { id: 'export-image', label: 'ÁîªÂÉè„Å®„Åó„Å¶Êõ∏„ÅçÂá∫„Åó', icon: 'üñºÔ∏è' }
          ]
        },
        { 
          id: 'import', 
          label: '„Ç§„É≥„Éù„Éº„Éà', 
          icon: 'üì•',
          disabled: isWikiMode,
          subItems: [
            { id: 'import-json', label: 'JSON„Éï„Ç°„Ç§„É´', icon: '{ }' },
            { id: 'import-csv', label: 'CSV„Éï„Ç°„Ç§„É´', icon: 'üìä' }
          ]
        }
      ]
    },
    {
      section: 'WikiÈÄ£Êê∫',
      icon: 'üîÑ',
      items: [
        {
          id: 'sync-samples',
          label: '„Çµ„É≥„Éó„É´„ÇíTLwiki„Å´ÂêåÊúü',
          icon: 'üì§',
          disabled: !currentUser,
          tooltip: !currentUser ? '„É≠„Ç∞„Ç§„É≥„ÅåÂøÖË¶Å„Åß„Åô' : '„É≠„Éº„Ç´„É´„Çµ„É≥„Éó„É´„ÇíTLwiki„Å´ÁôªÈå≤'
        },
        {
          id: 'import-wiki-search', 
          label: 'Ê§úÁ¥¢ÁµêÊûú„ÇíÂÄã‰∫∫„Å´ËøΩÂä†',
          icon: 'üì•',
          disabled: !currentUser || !isWikiMode,
          tooltip: !currentUser ? '„É≠„Ç∞„Ç§„É≥„ÅåÂøÖË¶Å„Åß„Åô' : 
                   !isWikiMode ? 'Wiki„É¢„Éº„Éâ„Åß„ÅÆ„ÅøÂà©Áî®ÂèØËÉΩ' : 'ÁèæÂú®„ÅÆÊ§úÁ¥¢ÁµêÊûú„ÇíÂÄã‰∫∫„Éï„Ç°„Ç§„É´„Å´ËøΩÂä†'
        },
        {
          id: 'import-wiki-timeline',
          label: 'Ë°®Á§∫Âπ¥Ë°®„ÇíÂÄã‰∫∫„Å´ËøΩÂä†',
          icon: 'üìã',
          disabled: !currentUser || !isWikiMode,
          tooltip: !currentUser ? '„É≠„Ç∞„Ç§„É≥„ÅåÂøÖË¶Å„Åß„Åô' : 
                   !isWikiMode ? 'Wiki„É¢„Éº„Éâ„Åß„ÅÆ„ÅøÂà©Áî®ÂèØËÉΩ' : 'ÁèæÂú®Ë°®Á§∫‰∏≠„ÅÆÂπ¥Ë°®„ÇíÂÄã‰∫∫„Éï„Ç°„Ç§„É´„Å´ËøΩÂä†'
        }
      ]
    },
    {
      section: '„Ç¢„Ç´„Ç¶„É≥„Éà',
      icon: '',
      items: currentUser ? [
        { 
          id: 'mypage', 
          label: '„Éû„Ç§„Éö„Éº„Ç∏', 
          icon: 'üìÇ',
          shortcut: '„Éò„ÉÉ„ÉÄ„Éº„É°„Éã„É•„Éº'
        },
        { 
          id: 'profile', 
          label: '„Éó„É≠„Éï„Ç£„Éº„É´Ë®≠ÂÆö', 
          icon: '‚öôÔ∏è'
        },
        { 
          id: 'logout', 
          label: '„É≠„Ç∞„Ç¢„Ç¶„Éà', 
          icon: 'üö™',
          shortcut: '„Éò„ÉÉ„ÉÄ„Éº„É°„Éã„É•„Éº'
        }
      ] : [
        { 
          id: 'login', 
          label: '„É≠„Ç∞„Ç§„É≥', 
          icon: 'üîë',
          shortcut: '„Éò„ÉÉ„ÉÄ„Éº„Éú„Çø„É≥'
        },
        { 
          id: 'about-login', 
          label: '„É≠„Ç∞„Ç§„É≥„Å´„Å§„ÅÑ„Å¶', 
          icon: '‚ÑπÔ∏è'
        }
      ]
    },
    {
      section: '„Éò„É´„Éó',
      icon: '',
      items: [
        { 
          id: 'shortcuts', 
          label: '„Ç≠„Éº„Éú„Éº„Éâ„Ç∑„Éß„Éº„Éà„Ç´„ÉÉ„Éà', 
          icon: '‚å®Ô∏è' 
        },
        { 
          id: 'usage-guide', 
          label: '‰Ωø„ÅÑÊñπ„Ç¨„Ç§„Éâ', 
          icon: 'üìñ' 
        },
        { 
          id: 'tips', 
          label: '‰æøÂà©„Å™‰Ωø„ÅÑÊñπ', 
          icon: 'üí°' 
        },
        { 
          id: 'feedback', 
          label: '„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØ„ÇíÈÄÅ„Çã', 
          icon: 'üí≠' 
        },
        { 
          id: 'version', 
          label: '„Éê„Éº„Ç∏„Éß„É≥ÊÉÖÂ†±', 
          icon: '‚ÑπÔ∏è' 
        },
        { 
          id: 'about', 
          label: '„Åì„ÅÆ„Ç¢„Éó„É™„Å´„Å§„ÅÑ„Å¶', 
          icon: 'üì±' 
        }
      ]
    }
  // „É°„Éã„É•„Éº„Ç¢„Ç§„ÉÜ„É†ÂãïÁöÑÁîüÊàêÈñ¢Êï∞
  const getMenuItems = () => [

  const handleItemClick = (itemId, section) => {
    if (onMenuItemClick) {
      onMenuItemClick(itemId, section);
    }
  };

  const sidebarStyles = {
    // „Ç≥„É≥„Éë„ÇØ„Éà„Çµ„Ç§„Éâ„Éê„ÉºÔºàÂ∏∏ÊôÇË°®Á§∫Ôºâ
    compactSidebar: {
      position: 'fixed',
      left: 0,
      top: 0,
      width: 60,
      height: '100vh',
      backgroundColor: '#f9fafb',
      borderRight: '1px solid #e5e7eb',
      zIndex: 101,
      display: 'flex',
      flexDirection: 'column',
      alignItems: 'center',
      paddingTop: '12px',
    },
    logoContainer: {
      width: 40,
      height: 40,
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      cursor: 'pointer',
      borderRadius: '8px',
      transition: 'all 0.2s',
      backgroundColor: isHovering ? '#e5e7eb' : 'transparent',
      position: 'relative',
    },
    logo: {
      width: 32,
      height: 32,
      objectFit: 'contain',
      transition: 'opacity 0.2s',
      opacity: isHovering ? 0 : 1,
    },
    menuIcon: {
      position: 'absolute',
      top: '50%',
      left: '50%',
      transform: 'translate(-50%, -50%)',
      opacity: isHovering ? 1 : 0,
      transition: 'opacity 0.2s',
    },
    // „Éï„É´„Çµ„Ç§„Éâ„Éê„Éº
    fullSidebar: {
      position: 'fixed',
      left: isOpen ? 60 : -250,
      top: 0,
      width: 250,
      height: '100vh',
      backgroundColor: '#ffffff',
      borderRight: '1px solid #e5e7eb',
      transition: 'left 0.3s ease',
      zIndex: 100,
      display: 'flex',
      flexDirection: 'column',
      boxShadow: isOpen ? '2px 0 8px rgba(0, 0, 0, 0.1)' : 'none',
    },
    headerSpace: {
      height: '64px',
      borderBottom: '1px solid #e5e7eb',
      display: 'flex',
      alignItems: 'center',
      paddingLeft: '16px',
      backgroundColor: '#f8fafc',
      fontSize: '14px',
      fontWeight: '600',
      color: '#374151',
      justifyContent: 'space-between'
    },
    modeIndicator: {
      fontSize: '12px',
      padding: '4px 8px',
      borderRadius: '12px',
      fontWeight: '500',
      marginRight: '12px'
    },
    content: {
      flex: 1,
      overflowY: 'auto',
      padding: '8px 0',
    },
    section: {
      marginBottom: '4px',
    },
    sectionHeader: {
      padding: '10px 16px',
      fontSize: '13px',
      fontWeight: '600',
      color: '#374151',
      cursor: 'pointer',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'space-between',
      userSelect: 'none',
      transition: 'background-color 0.2s',
      borderRadius: '0',
    },
    sectionIcon: {
      marginRight: '8px',
      fontSize: '16px',
    },
    chevron: {
      fontSize: '12px',
      transition: 'transform 0.2s',
    },
    menuItem: {
      padding: '8px 16px 8px 40px',
      fontSize: '13px',
      color: '#4b5563',
      cursor: 'pointer',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'space-between',
      transition: 'background-color 0.2s',
      userSelect: 'none',
      position: 'relative',
    },
    menuItemDisabled: {
      opacity: 0.5,
      cursor: 'not-allowed',
    },
    menuItemDanger: {
      color: '#dc2626',
    },
    menuItemIcon: {
      marginRight: '10px',
      fontSize: '14px',
      width: '20px',
      textAlign: 'center',
    },
    menuItemLabel: {
      flex: 1,
    },
    shortcut: {
      fontSize: '10px',
      color: '#9ca3af',
      marginLeft: '8px',
      fontStyle: 'italic',
    },
    submenu: {
      backgroundColor: '#f9fafb',
      borderLeft: '3px solid #e5e7eb',
      marginLeft: '12px',
    },
    submenuItem: {
      padding: '6px 16px 6px 32px',
      fontSize: '12px',
      color: '#6b7280',
      cursor: 'pointer',
      display: 'flex',
      alignItems: 'center',
      transition: 'background-color 0.2s',
    },
    tooltip: {
      position: 'absolute',
      left: '100%',
      top: '50%',
      transform: 'translateY(-50%)',
      marginLeft: '8px',
      padding: '4px 8px',
      backgroundColor: '#1f2937',
      color: 'white',
      fontSize: '11px',
      borderRadius: '4px',
      whiteSpace: 'nowrap',
      pointerEvents: 'none',
      opacity: 0,
      transition: 'opacity 0.2s',
    },
    footer: {
      borderTop: '1px solid #e5e7eb',
      padding: '12px 16px',
      fontSize: '11px',
      color: '#9ca3af',
      backgroundColor: '#f9fafb',
    }
  };

  const menuItems = getMenuItems();

  return (
    <>
      {/* „Ç≥„É≥„Éë„ÇØ„Éà„Çµ„Ç§„Éâ„Éê„Éº */}
      <div style={sidebarStyles.compactSidebar}>
        <div
          style={sidebarStyles.logoContainer}
          onClick={onToggle}
          onMouseEnter={() => setIsHovering(true)}
          onMouseLeave={() => setIsHovering(false)}
          title={isOpen ? '„Çµ„Ç§„Éâ„Éê„Éº„ÇíÈñâ„Åò„Çã' : '„Çµ„Ç§„Éâ„Éê„Éº„ÇíÈñã„Åè'}
        >
          <img src={logoSrc || logoImage} alt="Logo" style={sidebarStyles.logo} />
          <div style={sidebarStyles.menuIcon}>
            <svg 
              width="20" 
              height="20" 
              viewBox="0 0 24 24" 
              fill="none" 
              stroke="currentColor" 
              strokeWidth="2" 
              strokeLinecap="round" 
              strokeLinejoin="round"
              style={{ color: '#4b5563' }}
            >
              <line x1="3" y1="12" x2="21" y2="12"></line>
              <line x1="3" y1="6" x2="21" y2="6"></line>
              <line x1="3" y1="18" x2="21" y2="18"></line>
            </svg>
          </div>
        </div>
      </div>

      {/* „Éï„É´„Çµ„Ç§„Éâ„Éê„Éº */}
      <div style={sidebarStyles.fullSidebar}>
        <div style={sidebarStyles.headerSpace}>
          #„Éè„ÉÉ„Ç∑„É•„Çø„Ç∞Âπ¥Ë°®
          
          {/* „Éö„Éº„Ç∏„É¢„Éº„ÉâË°®Á§∫ */}
          <span style={{
            ...sidebarStyles.modeIndicator,
            backgroundColor: isWikiMode ? '#dbeafe' : '#ecfdf5',
            color: isWikiMode ? '#1d4ed8' : '#059669'
          }}>
            {isWikiMode ? 'üìö Wiki' : 'üìÅ ÂÄã‰∫∫'}
          </span>
        </div>
        
        <div style={sidebarStyles.content}>
          {menuItems.map(({ section, icon, items }) => (
            <div key={section} style={sidebarStyles.section}>
              <div
                style={sidebarStyles.sectionHeader}
                onClick={() => toggleSection(section)}
                onMouseEnter={(e) => e.target.style.backgroundColor = '#f3f4f6'}
                onMouseLeave={(e) => e.target.style.backgroundColor = 'transparent'}
              >
                <div>
                  <span style={sidebarStyles.sectionIcon}>{icon}</span>
                  {section}
                </div>
                <span 
                  style={{
                    ...sidebarStyles.chevron,
                    transform: expandedSections.has(section) ? 'rotate(90deg)' : 'rotate(0deg)'
                  }}
                >
                  ‚ñ∂
                </span>
              </div>
              
              {expandedSections.has(section) && (
                <div>
                  {items.map((item) => (
                    <div key={item.id}>
                      <div
                        style={{
                          ...sidebarStyles.menuItem,
                          ...(item.disabled ? sidebarStyles.menuItemDisabled : {}),
                          ...(item.danger ? sidebarStyles.menuItemDanger : {})
                        }}
                        onClick={() => !item.disabled && (item.subItems ? toggleSubmenu(item.id) : handleItemClick(item.id, section))}
                        onMouseEnter={(e) => {
                          if (!item.disabled) {
                            e.target.style.backgroundColor = '#f3f4f6';
                          }
                        }}
                        onMouseLeave={(e) => {
                          e.target.style.backgroundColor = 'transparent';
                        }}
                        title={item.tooltip}
                      >
                        <div style={{ display: 'flex', alignItems: 'center', flex: 1 }}>
                          <span style={sidebarStyles.menuItemIcon}>{item.icon}</span>
                          <span style={sidebarStyles.menuItemLabel}>{item.label}</span>
                          {item.subItems && (
                            <span 
                              style={{
                                ...sidebarStyles.chevron,
                                transform: expandedSubmenus.has(item.id) ? 
                                  'rotate(90deg)' : 'rotate(0deg)'
                              }}
                            >
                              ‚ñ∂
                            </span>
                          )}
                        </div>
                        {item.shortcut && (
                          <span style={sidebarStyles.shortcut}>{item.shortcut}</span>
                        )}
                      </div>
                      
                      {item.subItems && expandedSubmenus.has(item.id) && (
                        <div style={sidebarStyles.submenu}>
                          {item.subItems.map((subItem) => (
                            <div
                              key={subItem.id}
                              style={sidebarStyles.submenuItem}
                              onClick={() => handleItemClick(subItem.id, section)}
                              onMouseEnter={(e) => e.target.style.backgroundColor = '#f1f5f9'}
                              onMouseLeave={(e) => e.target.style.backgroundColor = 'transparent'}
                            >
                              <span style={sidebarStyles.menuItemIcon}>{subItem.icon}</span>
                              <span>{subItem.label}</span>
                            </div>
                          ))}
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              )}
            </div>
          ))}
        </div>
        
        {/* „Éï„ÉÉ„Çø„Éº */}
        <div style={sidebarStyles.footer}>
          <div style={{ marginBottom: '4px' }}>
            {currentPageMode === 'wiki' ? 
              'TLwiki - ÂÖ±ÂêåÁ∑®ÈõÜ„É¢„Éº„Éâ' : 
              'ÂÄã‰∫∫„Éï„Ç°„Ç§„É´ - Á∑®ÈõÜ„É¢„Éº„Éâ'
            }
          </div>
          {currentUser ? (
            <div style={{ fontSize: '10px' }}>
              „É≠„Ç∞„Ç§„É≥‰∏≠: {currentUser.email.split('@')[0]}
            </div>
          ) : (
            <div style={{ fontSize: '10px' }}>
              „É≠„Ç∞„Ç§„É≥„Åß‰øùÂ≠ò„ÉªWikiÊ©üËÉΩ„ÅåÂà©Áî®ÂèØËÉΩ
            </div>
          )}
        </div>
      </div>
    </>
  );
};

export default Sidebar;